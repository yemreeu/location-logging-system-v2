version: "3.8"

services:
  location:
    restart: always
    build:
      context: location
      args:
        NODEJS_DOCKER_IMAGE: ${NODEJS_DOCKER_IMAGE}
    volumes:
      - ./location:/app
      - /app/node_modules
    command: ["npm", "run", "start:debug"]
    ports:
      - "3000:3000"

  area:
    build:
      context: area
      args:
        NODEJS_DOCKER_IMAGE: ${NODEJS_DOCKER_IMAGE}
    restart: always
    volumes:
      - ./area:/app
      - /app/node_modules
    command: ["npm", "run", "start:debug"]

  log:
    build:
      context: log
      args:
        NODEJS_DOCKER_IMAGE: ${NODEJS_DOCKER_IMAGE}
    restart: always
    volumes:
      - ./log:/app
      - /app/node_modules
    command: ["npm", "run", "start:debug"]

  broker:
    image: bitnami/kafka:3.3.1
    volumes:
      - kafka_data:/var/lib/kafka/data
    user: root
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=LelM2dIFQkiUFvXCEcqRWA
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@broker:9093
      - ALLOW_PLAINTEXT_LISTENER=yes

volumes:
  kafka_data:
